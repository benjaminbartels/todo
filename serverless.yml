service: todo

frameworkVersion: '>=1.28.0 <2.0.0'

plugins:
  - serverless-domain-manager
  - serverless-s3-sync

custom:
  siteName: www.all4days.net
  hostedZoneName: all4days.net
  aliasHostedZoneId: Z3BJ6K6RIION7M    # us-west-2
  aliasDNSName: s3-website-us-west-2.amazonaws.com
  s3Sync:
    - bucketName: ${self:custom.siteName}
      localDir: ui/dist
  customDomain:
    domainName: api.all4days.net
    basePath: "v1"
    stage: ${self:provider.stage}
    createRoute53Record: true
    certificateName: '*.all4days.net'
    endpointType: 'regional'

provider:
  name: aws
  runtime: go1.x
  region: us-west-2
  role: arn:aws:iam::478114782390:role/lambda-todo-executor

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  todos:
    handler: bin/todos
    events:
      - http:
          path: todos
          method: get
          cors: true
      - http:
          path: todos/{id}
          method: get
          cors: true
      - http:
          path: todos
          method: post
          cors: true
      - http:
          path: todos/{id}
          method: put
          cors: true
      - http:
          path: todos/{id}
          method: delete
          cors: true

resources:
  Resources:
    StaticSite:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.siteName}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticSite
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource:
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "StaticSite"
                    },
                    "/*"
                  ]
                ]
    DnsRecord:
      Type: "AWS::Route53::RecordSet"
      Properties:
        AliasTarget:
          DNSName: ${self:custom.aliasDNSName}
          HostedZoneId: ${self:custom.aliasHostedZoneId}
        HostedZoneName: ${self:custom.hostedZoneName}.
        Name:
          Ref: StaticSite
        Type: 'A'

  Outputs:
    StaticSiteS3BucketName:
      Value:
        'Ref': StaticSite
    StaticSiteS3BucketDomainName:
      Value:
        Fn::GetAtt:
          - StaticSite
          - DomainName
    StaticSiteS3BucketWebsiteURL:
      Value:
        Fn::GetAtt:
          - StaticSite
          - WebsiteURL